exit
end
exit
@sorted.restaurants[0]
@sorted.restaurants
@sorted.restaurants.name
@sorted.restaurants.rating
@sorted.restaurant.rating
@sorted.name
@sorted.rating
@sorted
rating
exit
next
exit
Menu.choice
@choice
next
exit
sorted_price
exit
exti
@count
@counter
exit
final
exit
sorted_price
exit
price
exit
id[0] = 1
id[0] == 1
id[0]
price[0]
price
exit
price
exit
price
exit
price.restaurants.sort_by(&:price)
price.restaurants.class
price.restaurants
price.class
price.sort_by(&:price)
price
exit
rand.sort_by(&:price)
rand
exit
response.sort_by
response.sort_by("price")
response
exit
rand
exit
pp response
response
exit
value.class
hash["id"]
hash["id]
hash["id"]=value.id
hash[id]=value.id
hash = {}
value.id
value
quit
exit
rand
quit
ret
ret.name
ret.restaurant.name
ret.restaurantapi
ret.restaurants
ret[0]
ret
exit
ret
exit
ret
quit
clear
asd
/
aq
exit
response
exit
ret
exit
ret
exit
arr
exit
price
quit
price.to_a
price
quit
new_arr.sort
new_arr
new_arr[0][0] = 101
new.arr[0][0] = 101
new_arr.sort
new_arr[0][2]
new_arr[0][2\]
new_arr[0][3]
new_arr
exit
clear
(price.restaurants).sort
price.restaurants.sort
price.restaurants
price.price
price
exit
price[0]
price
exit
price
exit
price.class
price
exit
@restaurants.class
@restaurants
rand.class
rand
next
exit
price.each do |value| {puts value}
price.to_a
price.class
price
exit
price
price.price
pp price
@sorted
price.class
price
exit
@price.name
pp price
exit
pp @sorted
p @sorted
@sorted
exit
clear
p @sorted
p sorted
@sorted
exit
@choice
continue
next
exit
clear
@choice
exit
quit
clear
pp arr
arr
exit
clear
pp arr
arr
quit
pp arr
arr
exit
rand_res[1]
rand.res[1]
rand_res
exit
new_arr.class
new_arr.sample
new_arr
exit
rand.each do |value|
new_arr
new_arr.restaurant
new_arr.restaurants
new_arr.name
new_arr
exit
rand['name']
rand.name
rand
quit
restaurant['restaurant']['name']
restaurant['restaurant']
restaurant
exit
response
exit
response
exit
pp response
response
quit
response
exit
clear
HTTParty.get(value, headers: headers).response.body
HTTParty.get(value, headers: headers)
